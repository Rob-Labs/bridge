
EmpireToken.addLiquidity(uint256,uint256) (contracts/EmpireToken.sol#1155-1159) sends eth to arbitrary user
	Dangerous calls:
	- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

Reentrancy in EmpireToken._transfer(address,address,uint256) (contracts/EmpireToken.sol#1068-1086):
	External calls:
	- swapAndDistribute(contractTokenBalance) (contracts/EmpireToken.sol#1081)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (contracts/EmpireToken.sol#1152)
	External calls sending eth:
	- swapAndDistribute(contractTokenBalance) (contracts/EmpireToken.sol#1081)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount) (contracts/EmpireToken.sol#1085)
		- _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity (contracts/EmpireToken.sol#985)
		- _rOwned[address(this)] = _rOwned[address(this)] + rTeam (contracts/EmpireToken.sol#992)
		- _rOwned[address(this)] = _rOwned[address(this)] + (rBurn + rMarketing) (contracts/EmpireToken.sol#1000)
		- _rOwned[sender] = _rOwned[sender] - rAmount (contracts/EmpireToken.sol#1210)
		- _rOwned[sender] = _rOwned[sender] - rAmount (contracts/EmpireToken.sol#1195)
		- _rOwned[sender] = _rOwned[sender] - rAmount (contracts/EmpireToken.sol#1243)
		- _rOwned[sender] = _rOwned[sender] - rAmount (contracts/EmpireToken.sol#1227)
		- _rOwned[recipient] = _rOwned[recipient] + rTransferAmount (contracts/EmpireToken.sol#1196)
		- _rOwned[recipient] = _rOwned[recipient] + rTransferAmount (contracts/EmpireToken.sol#1228)
		- _rOwned[recipient] = _rOwned[recipient] + rTransferAmount (contracts/EmpireToken.sol#1212)
		- _rOwned[recipient] = _rOwned[recipient] + rTransferAmount (contracts/EmpireToken.sol#1245)
	- _tokenTransfer(from,to,amount) (contracts/EmpireToken.sol#1085)
		- _rTotal = _rTotal - rFee (contracts/EmpireToken.sol#896)
	- _tokenTransfer(from,to,amount) (contracts/EmpireToken.sol#1085)
		- _tOwned[address(this)] = _tOwned[address(this)] + tTeam (contracts/EmpireToken.sol#993)
		- _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity (contracts/EmpireToken.sol#986)
		- _tOwned[address(this)] = _tOwned[address(this)] + (tMarketing + tBurn) (contracts/EmpireToken.sol#1001)
		- _tOwned[sender] = _tOwned[sender] - tAmount (contracts/EmpireToken.sol#1242)
		- _tOwned[sender] = _tOwned[sender] - tAmount (contracts/EmpireToken.sol#1226)
		- _tOwned[recipient] = _tOwned[recipient] + tTransferAmount (contracts/EmpireToken.sol#1211)
		- _tOwned[recipient] = _tOwned[recipient] + tTransferAmount (contracts/EmpireToken.sol#1244)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

EmpireToken.addLiquidity(uint256,uint256) (contracts/EmpireToken.sol#1155-1159) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

EmpireToken.allowance(address,address).owner (contracts/EmpireToken.sol#807) shadows:
	- Ownable.owner() (contracts/EmpireToken.sol#282-284) (function)
EmpireToken._approve(address,address,uint256).owner (contracts/EmpireToken.sol#1057) shadows:
	- Ownable.owner() (contracts/EmpireToken.sol#282-284) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

EmpireToken.setBridge(address) (contracts/EmpireToken.sol#1359-1361) should emit an event for: 
	- bridge = _bridge (contracts/EmpireToken.sol#1360) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

EmpireToken.setSwapTokens(uint256) (contracts/EmpireToken.sol#1312-1314) should emit an event for: 
	- numTokensSellToAddToLiquidity = amount (contracts/EmpireToken.sol#1313) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

Ownable.constructor().msgSender (contracts/EmpireToken.sol#274) lacks a zero-check on :
		- _owner = msgSender (contracts/EmpireToken.sol#275)
EmpireToken.constructor(address,address)._marketingWallet (contracts/EmpireToken.sol#705) lacks a zero-check on :
		- marketingWallet = _marketingWallet (contracts/EmpireToken.sol#708)
EmpireToken.constructor(address,address)._teamWallet (contracts/EmpireToken.sol#705) lacks a zero-check on :
		- teamWallet = _teamWallet (contracts/EmpireToken.sol#711)
EmpireToken.setMarketingWallet(address).newWallet (contracts/EmpireToken.sol#1261) lacks a zero-check on :
		- marketingWallet = newWallet (contracts/EmpireToken.sol#1262)
EmpireToken.setBurnWallet(address).newWallet (contracts/EmpireToken.sol#1265) lacks a zero-check on :
		- burnWallet = newWallet (contracts/EmpireToken.sol#1266)
EmpireToken.setTeamWallet(address).newWallet (contracts/EmpireToken.sol#1269) lacks a zero-check on :
		- teamWallet = newWallet (contracts/EmpireToken.sol#1270)
EmpireToken.withdrawBNB(address,uint256).account (contracts/EmpireToken.sol#1338) lacks a zero-check on :
		- account.transfer(amount) (contracts/EmpireToken.sol#1340)
EmpireToken.setBridge(address)._bridge (contracts/EmpireToken.sol#1359) lacks a zero-check on :
		- bridge = _bridge (contracts/EmpireToken.sol#1360)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in EmpireToken._transfer(address,address,uint256) (contracts/EmpireToken.sol#1068-1086):
	External calls:
	- swapAndDistribute(contractTokenBalance) (contracts/EmpireToken.sol#1081)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (contracts/EmpireToken.sol#1152)
	External calls sending eth:
	- swapAndDistribute(contractTokenBalance) (contracts/EmpireToken.sol#1081)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount) (contracts/EmpireToken.sol#1085)
		- _burnFee = sellFee.burn (contracts/EmpireToken.sol#1044)
		- _burnFee = 0 (contracts/EmpireToken.sol#1028)
		- _burnFee = buyFee.burn (contracts/EmpireToken.sol#1036)
	- _tokenTransfer(from,to,amount) (contracts/EmpireToken.sol#1085)
		- _liquidityFee = 0 (contracts/EmpireToken.sol#1026)
		- _liquidityFee = buyFee.autoLp (contracts/EmpireToken.sol#1034)
		- _liquidityFee = sellFee.autoLp (contracts/EmpireToken.sol#1042)
	- _tokenTransfer(from,to,amount) (contracts/EmpireToken.sol#1085)
		- _marketingFee = 0 (contracts/EmpireToken.sol#1027)
		- _marketingFee = buyFee.marketing (contracts/EmpireToken.sol#1035)
		- _marketingFee = sellFee.marketing (contracts/EmpireToken.sol#1043)
	- _tokenTransfer(from,to,amount) (contracts/EmpireToken.sol#1085)
		- _tFeeTotal = _tFeeTotal + tFee (contracts/EmpireToken.sol#897)
	- _tokenTransfer(from,to,amount) (contracts/EmpireToken.sol#1085)
		- _taxFee = sellFee.tax (contracts/EmpireToken.sol#1041)
		- _taxFee = buyFee.tax (contracts/EmpireToken.sol#1033)
		- _taxFee = 0 (contracts/EmpireToken.sol#1025)
	- _tokenTransfer(from,to,amount) (contracts/EmpireToken.sol#1085)
		- _teamFee = sellFee.team (contracts/EmpireToken.sol#1045)
		- _teamFee = 0 (contracts/EmpireToken.sol#1029)
		- _teamFee = buyFee.team (contracts/EmpireToken.sol#1037)
Reentrancy in EmpireToken.constructor(address,address) (contracts/EmpireToken.sol#705-752):
	External calls:
	- uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this),_uniswapV2Router.WETH()) (contracts/EmpireToken.sol#729)
	State variables written after the call(s):
	- _isExcludedFromFee[address(this)] = true (contracts/EmpireToken.sol#734)
	- _isExcludedFromFee[owner()] = true (contracts/EmpireToken.sol#735)
	- _isExcludedFromFee[address(uniswapV2Router)] = true (contracts/EmpireToken.sol#737)
	- buyFee.autoLp = 4 (contracts/EmpireToken.sol#739)
	- buyFee.burn = 0 (contracts/EmpireToken.sol#740)
	- buyFee.marketing = 3 (contracts/EmpireToken.sol#741)
	- buyFee.tax = 2 (contracts/EmpireToken.sol#742)
	- buyFee.team = 1 (contracts/EmpireToken.sol#743)
	- sellFee.autoLp = 4 (contracts/EmpireToken.sol#745)
	- sellFee.burn = 0 (contracts/EmpireToken.sol#746)
	- sellFee.marketing = 3 (contracts/EmpireToken.sol#747)
	- sellFee.tax = 2 (contracts/EmpireToken.sol#748)
	- sellFee.team = 1 (contracts/EmpireToken.sol#749)
	- uniswapV2Router = _uniswapV2Router (contracts/EmpireToken.sol#732)
Reentrancy in EmpireToken.setRouterAddress(address) (contracts/EmpireToken.sol#1301-1305):
	External calls:
	- uniswapV2Pair = IUniswapV2Factory(_newUniswapRouter.factory()).createPair(address(this),_newUniswapRouter.WETH()) (contracts/EmpireToken.sol#1303)
	State variables written after the call(s):
	- uniswapV2Router = _newUniswapRouter (contracts/EmpireToken.sol#1304)
Reentrancy in EmpireToken.swapAndDistribute(uint256) (contracts/EmpireToken.sol#1088-1104):
	External calls:
	- swapAndLiquify(forLiquidity) (contracts/EmpireToken.sol#1092)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (contracts/EmpireToken.sol#1152)
	External calls sending eth:
	- swapAndLiquify(forLiquidity) (contracts/EmpireToken.sol#1092)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
	State variables written after the call(s):
	- sendToBurn(forBurn) (contracts/EmpireToken.sol#1095)
		- _rOwned[burnWallet] = _rOwned[burnWallet] + rBurn (contracts/EmpireToken.sol#1109)
		- _rOwned[address(this)] = _rOwned[address(this)] - rBurn (contracts/EmpireToken.sol#1110)
	- sendToMarketing(forMarketing) (contracts/EmpireToken.sol#1098)
		- _rOwned[marketingWallet] = _rOwned[marketingWallet] + rMarketing (contracts/EmpireToken.sol#1125)
		- _rOwned[address(this)] = _rOwned[address(this)] - rMarketing (contracts/EmpireToken.sol#1126)
	- sendToTeam(forTeam) (contracts/EmpireToken.sol#1101)
		- _rOwned[teamWallet] = _rOwned[teamWallet] + rTeam (contracts/EmpireToken.sol#1117)
		- _rOwned[address(this)] = _rOwned[address(this)] - rTeam (contracts/EmpireToken.sol#1118)
	- sendToBurn(forBurn) (contracts/EmpireToken.sol#1095)
		- _tOwned[burnWallet] = _tOwned[burnWallet] + tBurn (contracts/EmpireToken.sol#1111)
	- sendToMarketing(forMarketing) (contracts/EmpireToken.sol#1098)
		- _tOwned[marketingWallet] = _tOwned[marketingWallet] + tMarketing (contracts/EmpireToken.sol#1127)
	- sendToTeam(forTeam) (contracts/EmpireToken.sol#1101)
		- _tOwned[teamWallet] = _tOwned[teamWallet] + tTeam (contracts/EmpireToken.sol#1119)
Reentrancy in EmpireToken.swapAndLiquify(uint256) (contracts/EmpireToken.sol#1130-1143):
	External calls:
	- swapTokensForETH(half) (contracts/EmpireToken.sol#1136)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (contracts/EmpireToken.sol#1152)
	- addLiquidity(otherHalf,newBalance) (contracts/EmpireToken.sol#1140)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (contracts/EmpireToken.sol#1140)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
	State variables written after the call(s):
	- addLiquidity(otherHalf,newBalance) (contracts/EmpireToken.sol#1140)
		- _allowances[owner][spender] = amount (contracts/EmpireToken.sol#1064)
Reentrancy in EmpireToken.transferFrom(address,address,uint256) (contracts/EmpireToken.sol#816-824):
	External calls:
	- _transfer(sender,recipient,amount) (contracts/EmpireToken.sol#821)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (contracts/EmpireToken.sol#1152)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (contracts/EmpireToken.sol#821)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
	State variables written after the call(s):
	- _approve(sender,_msgSender(),balanceCheck(_allowances[sender][_msgSender()],amount,ERC20: transfer amount exceeds allowance)) (contracts/EmpireToken.sol#822)
		- _allowances[owner][spender] = amount (contracts/EmpireToken.sol#1064)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in EmpireToken._transfer(address,address,uint256) (contracts/EmpireToken.sol#1068-1086):
	External calls:
	- swapAndDistribute(contractTokenBalance) (contracts/EmpireToken.sol#1081)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (contracts/EmpireToken.sol#1152)
	External calls sending eth:
	- swapAndDistribute(contractTokenBalance) (contracts/EmpireToken.sol#1081)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
	Event emitted after the call(s):
	- Transfer(sender,recipient,tTransferAmount) (contracts/EmpireToken.sol#1201)
		- _tokenTransfer(from,to,amount) (contracts/EmpireToken.sol#1085)
	- Transfer(sender,recipient,tTransferAmount) (contracts/EmpireToken.sol#1217)
		- _tokenTransfer(from,to,amount) (contracts/EmpireToken.sol#1085)
	- Transfer(sender,recipient,tTransferAmount) (contracts/EmpireToken.sol#1233)
		- _tokenTransfer(from,to,amount) (contracts/EmpireToken.sol#1085)
	- Transfer(sender,recipient,tTransferAmount) (contracts/EmpireToken.sol#1250)
		- _tokenTransfer(from,to,amount) (contracts/EmpireToken.sol#1085)
Reentrancy in EmpireToken.constructor(address,address) (contracts/EmpireToken.sol#705-752):
	External calls:
	- uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this),_uniswapV2Router.WETH()) (contracts/EmpireToken.sol#729)
	Event emitted after the call(s):
	- Transfer(address(0),_msgSender(),_tTotal) (contracts/EmpireToken.sol#751)
Reentrancy in EmpireToken.swapAndDistribute(uint256) (contracts/EmpireToken.sol#1088-1104):
	External calls:
	- swapAndLiquify(forLiquidity) (contracts/EmpireToken.sol#1092)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (contracts/EmpireToken.sol#1152)
	External calls sending eth:
	- swapAndLiquify(forLiquidity) (contracts/EmpireToken.sol#1092)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
	Event emitted after the call(s):
	- SwapAndDistribute(forMarketing,forLiquidity,forBurn,forTeam) (contracts/EmpireToken.sol#1103)
Reentrancy in EmpireToken.swapAndLiquify(uint256) (contracts/EmpireToken.sol#1130-1143):
	External calls:
	- swapTokensForETH(half) (contracts/EmpireToken.sol#1136)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (contracts/EmpireToken.sol#1152)
	- addLiquidity(otherHalf,newBalance) (contracts/EmpireToken.sol#1140)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (contracts/EmpireToken.sol#1140)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (contracts/EmpireToken.sol#1065)
		- addLiquidity(otherHalf,newBalance) (contracts/EmpireToken.sol#1140)
	- SwapAndLiquify(half,newBalance,otherHalf) (contracts/EmpireToken.sol#1142)
Reentrancy in EmpireToken.transferFrom(address,address,uint256) (contracts/EmpireToken.sol#816-824):
	External calls:
	- _transfer(sender,recipient,amount) (contracts/EmpireToken.sol#821)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (contracts/EmpireToken.sol#1152)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (contracts/EmpireToken.sol#821)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,liquidityWallet,block.timestamp) (contracts/EmpireToken.sol#1158)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (contracts/EmpireToken.sol#1065)
		- _approve(sender,_msgSender(),balanceCheck(_allowances[sender][_msgSender()],amount,ERC20: transfer amount exceeds allowance)) (contracts/EmpireToken.sol#822)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Address.isContract(address) (contracts/EmpireToken.sol#101-112) uses assembly
	- INLINE ASM (contracts/EmpireToken.sol#108-110)
Address._functionCallWithValue(address,bytes,uint256,string) (contracts/EmpireToken.sol#209-235) uses assembly
	- INLINE ASM (contracts/EmpireToken.sol#227-230)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

EmpireToken._tokenTransfer(address,address,uint256) (contracts/EmpireToken.sol#1161-1187) compares to a boolean constant:
	-automatedMarketMakerPairs[sender] == true (contracts/EmpireToken.sol#1169)
EmpireToken._tokenTransfer(address,address,uint256) (contracts/EmpireToken.sol#1161-1187) compares to a boolean constant:
	-automatedMarketMakerPairs[recipient] == true (contracts/EmpireToken.sol#1171)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

EmpireToken.includeInReward(address) (contracts/EmpireToken.sol#879-890) has costly operations inside a loop:
	- _excluded.pop() (contracts/EmpireToken.sol#886)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Address._functionCallWithValue(address,bytes,uint256,string) (contracts/EmpireToken.sol#209-235) is never used and should be removed
Address.functionCall(address,bytes) (contracts/EmpireToken.sol#156-158) is never used and should be removed
Address.functionCall(address,bytes,string) (contracts/EmpireToken.sol#166-172) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (contracts/EmpireToken.sol#185-191) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256,string) (contracts/EmpireToken.sol#199-207) is never used and should be removed
Address.isContract(address) (contracts/EmpireToken.sol#101-112) is never used and should be removed
Address.sendValue(address,uint256) (contracts/EmpireToken.sol#130-136) is never used and should be removed
Context._msgData() (contracts/EmpireToken.sol#246-249) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

EmpireToken._rTotal (contracts/EmpireToken.sol#662) is set pre-construction with a non-constant function or state variable:
	- (MAX - (MAX % _tTotal))
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Pragma version^0.8.9 (contracts/EmpireToken.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
solc-0.8.9 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (contracts/EmpireToken.sol#130-136):
	- (success) = recipient.call{value: amount}() (contracts/EmpireToken.sol#134)
Low level call in Address._functionCallWithValue(address,bytes,uint256,string) (contracts/EmpireToken.sol#209-235):
	- (success,returndata) = target.call{value: weiValue}(data) (contracts/EmpireToken.sol#218)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IUniswapV2Pair.DOMAIN_SEPARATOR() (contracts/EmpireToken.sol#363) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (contracts/EmpireToken.sol#365) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (contracts/EmpireToken.sol#384) is not in mixedCase
Function IUniswapV2Router01.WETH() (contracts/EmpireToken.sol#428) is not in mixedCase
Parameter EmpireToken.calculateTaxFee(uint256)._amount (contracts/EmpireToken.sol#1004) is not in mixedCase
Parameter EmpireToken.calculateLiquidityFee(uint256)._amount (contracts/EmpireToken.sol#1008) is not in mixedCase
Parameter EmpireToken.calculateBurnFee(uint256)._amount (contracts/EmpireToken.sol#1012) is not in mixedCase
Parameter EmpireToken.calculateMarketingFee(uint256)._amount (contracts/EmpireToken.sol#1016) is not in mixedCase
Parameter EmpireToken.calculateTeamFee(uint256)._amount (contracts/EmpireToken.sol#1020) is not in mixedCase
Parameter EmpireToken.setBuyFees(uint256,uint256,uint256,uint256,uint256)._lp (contracts/EmpireToken.sol#1274) is not in mixedCase
Parameter EmpireToken.setBuyFees(uint256,uint256,uint256,uint256,uint256)._marketing (contracts/EmpireToken.sol#1275) is not in mixedCase
Parameter EmpireToken.setBuyFees(uint256,uint256,uint256,uint256,uint256)._burn (contracts/EmpireToken.sol#1276) is not in mixedCase
Parameter EmpireToken.setBuyFees(uint256,uint256,uint256,uint256,uint256)._tax (contracts/EmpireToken.sol#1277) is not in mixedCase
Parameter EmpireToken.setBuyFees(uint256,uint256,uint256,uint256,uint256)._team (contracts/EmpireToken.sol#1278) is not in mixedCase
Parameter EmpireToken.setSellFees(uint256,uint256,uint256,uint256,uint256)._lp (contracts/EmpireToken.sol#1288) is not in mixedCase
Parameter EmpireToken.setSellFees(uint256,uint256,uint256,uint256,uint256)._marketing (contracts/EmpireToken.sol#1289) is not in mixedCase
Parameter EmpireToken.setSellFees(uint256,uint256,uint256,uint256,uint256)._burn (contracts/EmpireToken.sol#1290) is not in mixedCase
Parameter EmpireToken.setSellFees(uint256,uint256,uint256,uint256,uint256)._tax (contracts/EmpireToken.sol#1291) is not in mixedCase
Parameter EmpireToken.setSellFees(uint256,uint256,uint256,uint256,uint256)._team (contracts/EmpireToken.sol#1292) is not in mixedCase
Parameter EmpireToken.setSwapAndLiquifyEnabled(bool)._enabled (contracts/EmpireToken.sol#1307) is not in mixedCase
Function EmpireToken._transferOwnership(address) (contracts/EmpireToken.sol#1332-1336) is not in mixedCase
Parameter EmpireToken.setBridge(address)._bridge (contracts/EmpireToken.sol#1359) is not in mixedCase
Constant EmpireToken._name (contracts/EmpireToken.sol#666) is not in UPPER_CASE_WITH_UNDERSCORES
Constant EmpireToken._symbol (contracts/EmpireToken.sol#667) is not in UPPER_CASE_WITH_UNDERSCORES
Constant EmpireToken._decimals (contracts/EmpireToken.sol#668) is not in UPPER_CASE_WITH_UNDERSCORES
Variable EmpireToken._taxFee (contracts/EmpireToken.sol#670) is not in mixedCase
Variable EmpireToken._liquidityFee (contracts/EmpireToken.sol#671) is not in mixedCase
Variable EmpireToken._burnFee (contracts/EmpireToken.sol#672) is not in mixedCase
Variable EmpireToken._marketingFee (contracts/EmpireToken.sol#673) is not in mixedCase
Variable EmpireToken._teamFee (contracts/EmpireToken.sol#674) is not in mixedCase
Modifier EmpireToken.OnlyBridge() (contracts/EmpireToken.sol#1354-1357) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (contracts/EmpireToken.sol#247)" inContext (contracts/EmpireToken.sol#241-250)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Reentrancy in EmpireToken.withdrawBNB(address,uint256) (contracts/EmpireToken.sol#1338-1342):
	External calls:
	- account.transfer(amount) (contracts/EmpireToken.sol#1340)
	Event emitted after the call(s):
	- WithdrawalBNB(account,amount) (contracts/EmpireToken.sol#1341)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

Variable IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (contracts/EmpireToken.sol#433) is too similar to IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (contracts/EmpireToken.sol#434)
Variable EmpireToken._transferStandard(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1194) is too similar to EmpireToken._transferStandard(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1194)
Variable EmpireToken._transferBothExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1241) is too similar to EmpireToken._transferFromExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1225)
Variable EmpireToken._transferToExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1209) is too similar to EmpireToken._transferFromExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1225)
Variable EmpireToken.reflectionFromToken(uint256,bool).rTransferAmount (contracts/EmpireToken.sol#859) is too similar to EmpireToken._getTValues(uint256).tTransferAmount (contracts/EmpireToken.sol#933)
Variable EmpireToken._transferStandard(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1194) is too similar to EmpireToken._getTValues(uint256).tTransferAmount (contracts/EmpireToken.sol#933)
Variable EmpireToken._transferFromExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1225) is too similar to EmpireToken._transferFromExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1225)
Variable EmpireToken._transferBothExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1241) is too similar to EmpireToken._getValues(uint256).tTransferAmount (contracts/EmpireToken.sol#912)
Variable EmpireToken._transferBothExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1241) is too similar to EmpireToken._transferToExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1209)
Variable EmpireToken.reflectionFromToken(uint256,bool).rTransferAmount (contracts/EmpireToken.sol#859) is too similar to EmpireToken._transferFromExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1225)
Variable EmpireToken._transferToExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1209) is too similar to EmpireToken._transferToExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1209)
Variable EmpireToken._transferStandard(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1194) is too similar to EmpireToken._transferFromExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1225)
Variable EmpireToken._getValues(uint256).rTransferAmount (contracts/EmpireToken.sol#913) is too similar to EmpireToken._transferFromExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1225)
Variable EmpireToken.reflectionFromToken(uint256,bool).rTransferAmount (contracts/EmpireToken.sol#859) is too similar to EmpireToken._getValues(uint256).tTransferAmount (contracts/EmpireToken.sol#912)
Variable EmpireToken._transferStandard(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1194) is too similar to EmpireToken._getValues(uint256).tTransferAmount (contracts/EmpireToken.sol#912)
Variable EmpireToken.reflectionFromToken(uint256,bool).rTransferAmount (contracts/EmpireToken.sol#859) is too similar to EmpireToken._transferToExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1209)
Variable EmpireToken._transferStandard(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1194) is too similar to EmpireToken._transferToExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1209)
Variable EmpireToken._transferBothExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1241) is too similar to EmpireToken._getTValues(uint256).tTransferAmount (contracts/EmpireToken.sol#933)
Variable EmpireToken._transferToExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1209) is too similar to EmpireToken._transferStandard(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1194)
Variable EmpireToken._getRValues(uint256,uint256,uint256,uint256,uint256,uint256).rTransferAmount (contracts/EmpireToken.sol#961) is too similar to EmpireToken._getTValues(uint256).tTransferAmount (contracts/EmpireToken.sol#933)
Variable EmpireToken.reflectionFromToken(uint256,bool).rTransferAmount (contracts/EmpireToken.sol#859) is too similar to EmpireToken._transferBothExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1241)
Variable EmpireToken._getRValues(uint256,uint256,uint256,uint256,uint256,uint256).rTransferAmount (contracts/EmpireToken.sol#961) is too similar to EmpireToken._transferStandard(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1194)
Variable EmpireToken._getValues(uint256).rTransferAmount (contracts/EmpireToken.sol#913) is too similar to EmpireToken._transferBothExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1241)
Variable EmpireToken._getValues(uint256).rTransferAmount (contracts/EmpireToken.sol#913) is too similar to EmpireToken._transferToExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1209)
Variable EmpireToken._transferFromExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1225) is too similar to EmpireToken._transferBothExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1241)
Variable EmpireToken._getValues(uint256).rTransferAmount (contracts/EmpireToken.sol#913) is too similar to EmpireToken._getValues(uint256).tTransferAmount (contracts/EmpireToken.sol#912)
Variable EmpireToken._transferFromExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1225) is too similar to EmpireToken._transferToExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1209)
Variable EmpireToken._transferFromExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1225) is too similar to EmpireToken._getValues(uint256).tTransferAmount (contracts/EmpireToken.sol#912)
Variable EmpireToken.reflectionFromToken(uint256,bool).rTransferAmount (contracts/EmpireToken.sol#859) is too similar to EmpireToken._transferStandard(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1194)
Variable EmpireToken._transferBothExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1241) is too similar to EmpireToken._transferBothExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1241)
Variable EmpireToken._getValues(uint256).rTransferAmount (contracts/EmpireToken.sol#913) is too similar to EmpireToken._getTValues(uint256).tTransferAmount (contracts/EmpireToken.sol#933)
Variable EmpireToken._transferToExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1209) is too similar to EmpireToken._transferBothExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1241)
Variable EmpireToken._transferFromExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1225) is too similar to EmpireToken._getTValues(uint256).tTransferAmount (contracts/EmpireToken.sol#933)
Variable EmpireToken._getValues(uint256).rTransferAmount (contracts/EmpireToken.sol#913) is too similar to EmpireToken._transferStandard(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1194)
Variable EmpireToken._transferFromExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1225) is too similar to EmpireToken._transferStandard(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1194)
Variable EmpireToken._transferToExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1209) is too similar to EmpireToken._getValues(uint256).tTransferAmount (contracts/EmpireToken.sol#912)
Variable EmpireToken._getRValues(uint256,uint256,uint256,uint256,uint256,uint256).rTransferAmount (contracts/EmpireToken.sol#961) is too similar to EmpireToken._transferBothExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1241)
Variable EmpireToken._getRValues(uint256,uint256,uint256,uint256,uint256,uint256).rTransferAmount (contracts/EmpireToken.sol#961) is too similar to EmpireToken._transferToExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1209)
Variable EmpireToken._getRValues(uint256,uint256,uint256,uint256,uint256,uint256).rTransferAmount (contracts/EmpireToken.sol#961) is too similar to EmpireToken._getValues(uint256).tTransferAmount (contracts/EmpireToken.sol#912)
Variable EmpireToken._transferBothExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1241) is too similar to EmpireToken._transferStandard(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1194)
Variable EmpireToken._transferToExcluded(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1209) is too similar to EmpireToken._getTValues(uint256).tTransferAmount (contracts/EmpireToken.sol#933)
Variable EmpireToken._getRValues(uint256,uint256,uint256,uint256,uint256,uint256).rTransferAmount (contracts/EmpireToken.sol#961) is too similar to EmpireToken._transferFromExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1225)
Variable EmpireToken._transferStandard(address,address,uint256).rTransferAmount (contracts/EmpireToken.sol#1194) is too similar to EmpireToken._transferBothExcluded(address,address,uint256).tTransferAmount (contracts/EmpireToken.sol#1241)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-are-too-similar

EmpireToken.updateGasForProcessing(uint256) (contracts/EmpireToken.sol#1316-1321) uses literals with too many digits:
	- require(bool,string)(newValue >= 200000 && newValue <= 500000,gasForProcessing must be between 200,000 and 500,000) (contracts/EmpireToken.sol#1317)
EmpireToken.slitherConstructorVariables() (contracts/EmpireToken.sol#625-1381) uses literals with too many digits:
	- _tTotal = 1000000000 * 10 ** 9 (contracts/EmpireToken.sol#661)
EmpireToken.slitherConstructorVariables() (contracts/EmpireToken.sol#625-1381) uses literals with too many digits:
	- gasForProcessing = 500000 (contracts/EmpireToken.sol#664)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

Ownable._previousOwner (contracts/EmpireToken.sol#266) is never used in EmpireToken (contracts/EmpireToken.sol#625-1381)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

Ownable._previousOwner (contracts/EmpireToken.sol#266) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

renounceOwnership() should be declared external:
	- Ownable.renounceOwnership() (contracts/EmpireToken.sol#301-304)
setAutomatedMarketMakerPair(address) should be declared external:
	- EmpireToken.setAutomatedMarketMakerPair(address) (contracts/EmpireToken.sol#754-758)
removeAutomatedMarketMakerPair(address) should be declared external:
	- EmpireToken.removeAutomatedMarketMakerPair(address) (contracts/EmpireToken.sol#760-764)
excludeFromReward(address) should be declared external:
	- EmpireToken.excludeFromReward(address) (contracts/EmpireToken.sol#870-877)
_transferOwnership(address) should be declared external:
	- EmpireToken._transferOwnership(address) (contracts/EmpireToken.sol#1332-1336)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
bsc:0xdfeAD35eA621Afdbc34808aF9b8198BaFe435282 analyzed (9 contracts with 77 detectors), 130 result(s) found
